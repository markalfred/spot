// Generated by CoffeeScript 1.9.3
var AUTH_TOKEN, CONTENT_HEADER, IMG_DIR, REQUEST_OPTS, SEARCH_URL, SOUND_DIR, _, art, blessed, content, fs, getImage, getPlaylists, getToken, main, maxWidth, moment, performSearch, playProcess, playSample, playlists, ps, render, request, screen, searchInput, searchModal, setContentRows, setup, sidebar, temp, title;

require('dotenv').load();

_ = require('lodash');

fs = require('fs');

ps = require('child_process');

temp = require('temp');

moment = require('moment');

request = require('request');

blessed = require('blessed', screen);

AUTH_TOKEN = null;

REQUEST_OPTS = null;

IMG_DIR = null;

SOUND_DIR = null;

setup = function() {
  getToken();
  temp.track();
  temp.mkdir('images', function(err, dirPath) {
    return IMG_DIR = dirPath;
  });
  return temp.mkdir('sound', function(err, dirPath) {
    return SOUND_DIR = dirPath;
  });
};

render = function() {
  playlists.focus();
  searchModal.hide();
  return screen.render();
};

getToken = function() {
  var opts;
  opts = {
    method: 'POST',
    url: 'https://accounts.spotify.com/api/token',
    headers: {
      'Authorization': "Basic " + (new Buffer(process.env.CLIENT_ID + ":" + process.env.CLIENT_SECRET).toString('base64')),
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    form: {
      'grant_type': 'client_credentials'
    }
  };
  return request(opts, function(err, res, body) {
    AUTH_TOKEN = JSON.parse(body).access_token;
    REQUEST_OPTS = {
      headers: {
        'Authorization': "Bearer " + AUTH_TOKEN
      }
    };
    render();
    return getPlaylists(AUTH_TOKEN);
  });
};

getPlaylists = function(token) {
  var options;
  options = {
    url: "https://api.spotify.com/v1/users/" + process.env.USERNAME + "/playlists?limit=50",
    headers: {
      'Authorization': "Bearer " + token
    }
  };
  return request(options, function(err, res, body) {
    var playlistJson;
    if (err) {
      console.log(err);
    }
    playlists.collection = playlistJson = JSON.parse(body);
    playlists.setItems(_.pluck(playlistJson.items, 'name'));
    return screen.render();
  });
};

setup();

CONTENT_HEADER = ['SONG', 'ARTIST', 'ALBUM', 'LENGTH'];

SEARCH_URL = 'https://api.spotify.com/v1/search?type=track&limit=50&q=';

screen = blessed.screen({
  smartCSR: true,
  dockBorders: true
});

screen.title = 'Spot';

title = blessed.text({
  parent: screen,
  top: 'top',
  left: 'center',
  align: 'center',
  height: 1,
  style: {
    fg: 'green'
  },
  tags: true,
  content: '{bold} Spot {/}'
});

sidebar = blessed.box({
  parent: screen,
  top: title.height,
  left: 0,
  height: "100%-" + title.height,
  border: 'line'
});

maxWidth = 40;

if (sidebar.width > maxWidth) {
  sidebar.width = maxWidth;
}

main = blessed.box({
  parent: screen,
  top: title.height,
  left: sidebar.width - 1,
  right: 'right',
  height: "100%-" + title.height,
  width: "100%-" + sidebar.width,
  border: 'line'
});

content = blessed.listtable({
  parent: main,
  top: 0,
  left: 0,
  height: '100%-2',
  width: '100%-2',
  scrollable: true,
  border: true,
  keys: true,
  vi: true,
  mouse: true,
  style: {
    cell: {
      fg: 'grey',
      selected: {
        fg: 'white',
        bold: true
      }
    },
    header: {
      fg: 'grey',
      bold: true
    }
  },
  scrollbar: {
    ch: ' ',
    inverse: true
  }
});

art = blessed.png({
  parent: sidebar,
  bottom: 0,
  left: 0,
  height: 16,
  width: '100%-2'
});

playlists = blessed.list({
  parent: sidebar,
  top: 0,
  left: 0,
  height: 'shrink',
  width: '100%-2',
  scrollable: true,
  mouse: true,
  keys: true,
  vi: true,
  content: 'Loading...',
  padding: {
    top: 0,
    right: 1,
    bottom: 0,
    left: 1
  },
  style: {
    selected: {
      fg: 'white',
      bold: true
    },
    item: {
      fg: 'grey'
    }
  },
  scrollbar: {
    ch: ' ',
    inverse: true
  }
});

playlists.height = screen.height - title.height - art.height - 2;

searchModal = blessed.box({
  parent: screen,
  shadow: true,
  left: 'center',
  top: 'center',
  width: '50%',
  height: '50%',
  style: {
    bg: 'white'
  },
  border: 'line'
});

searchInput = blessed.prompt({
  parent: searchModal,
  top: 1,
  left: 'center',
  height: 'shrink',
  width: '75%',
  tags: true
});

setContentRows = function(rows) {
  content.collection = rows;
  rows = _.map(content.collection, function(c) {
    return [c.name, _.map(c.artists, 'name').join(', '), c.album.name, moment(c.duration_ms).format('m:ss')];
  });
  return content.setRows([CONTENT_HEADER].concat(rows));
};

performSearch = function(err, query) {
  searchModal.hide();
  screen.render();
  if (!(query != null ? query.length : void 0)) {
    return;
  }
  return request(SEARCH_URL + query.split(' ').join('+'), function(err, res, body) {
    setContentRows(JSON.parse(body).tracks.items);
    return screen.render();
  });
};

getImage = function(filename) {
  var SPOTIFY_URL, e, exists;
  SPOTIFY_URL = 'https://i.scdn.co/image';
  exists = (function() {
    try {
      return fs.statSync(IMG_DIR + "/" + filename + ".png").isFile();
    } catch (_error) {
      e = _error;
      return false;
    }
  })();
  if (exists) {
    art.setImage(IMG_DIR + "/" + filename + ".png");
    return screen.render();
  } else {
    return request.get(SPOTIFY_URL + "/" + filename).pipe(fs.createWriteStream(IMG_DIR + "/" + filename)).on('error', function(err) {
      return console.log(err);
    }).on('finish', function() {
      return ps.exec("sips " + IMG_DIR + "/" + filename + " -s format png --out " + IMG_DIR + "/" + filename + ".png", function() {
        art.setImage(IMG_DIR + "/" + filename + ".png");
        return screen.render();
      });
    });
  }
};

playProcess = null;

playSample = function(filename) {
  var SPOTIFY_URL, e, exists;
  SPOTIFY_URL = 'https://p.scdn.co/mp3-preview';
  exists = (function() {
    try {
      return fs.statSync(SOUND_DIR + "/" + filename).isFile();
    } catch (_error) {
      e = _error;
      return false;
    }
  })();
  if (exists) {
    if (playProcess != null) {
      playProcess.kill();
    }
    return playProcess = ps.exec("afplay " + SOUND_DIR + "/" + filename);
  } else {
    return request.get(SPOTIFY_URL + "/" + filename).pipe(fs.createWriteStream(SOUND_DIR + "/" + filename)).on('error', function(err) {
      return console.log(err);
    }).on('finish', function() {
      if (playProcess != null) {
        playProcess.kill();
      }
      return playProcess = ps.exec("afplay " + SOUND_DIR + "/" + filename);
    });
  }
};

playlists.key('enter', function() {
  var opts;
  opts = _.extend(REQUEST_OPTS, {
    url: playlists.collection.items[playlists.selected].tracks.href
  });
  return request(opts, function(err, res, body) {
    setContentRows(_.pluck(JSON.parse(body).items, 'track'));
    content.focus();
    return screen.render();
  });
});

content.key('enter', function() {
  var track;
  track = content.collection[content.selected - 1];
  getImage(track.album.images[2].url.split('/').pop());
  return playSample(track.preview_url.split('/').pop());
});

screen.key('q', function() {
  if (playProcess != null) {
    playProcess.kill();
  }
  return process.exit(0);
});

screen.key('tab', function() {
  if (screen.focused === content) {
    return playlists.focus();
  } else if (screen.focused === playlists) {
    return content.focus();
  }
});

screen.key('/', function() {
  searchModal.show();
  searchInput.input('Search', '', performSearch);
  return screen.render();
});
